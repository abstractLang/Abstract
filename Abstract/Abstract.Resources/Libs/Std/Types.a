###

    ABSTRACT STANDARD LIBRARY SCRIPT

###

namespace Types {

    @defineGlobal("type") @public @abstract struct Type {}
    @defineGlobal("anytype") @public @abstract struct AnyType {}

    @public @abstract struct Integer {

        @overrideOperator("==")
        @public @static func bool equals(Integer a, Integer b)
        @overrideOperator("!=")
        @public @static func bool unequals(Integer a, Integer b)

    }

    @defineGlobal("i8") @public @valueOnly @final struct SignedInteger8 extends Integer {

        @public @static const i8 minValue
        @public @static const i8 maxValue

        @ImplicitConvert @public @static func i16 cast_i16(i8 value)
        @ImplicitConvert @public @static func i32 cast_i32(i8 value)
        @ImplicitConvert @public @static func i64 cast_i64(i8 value)
        @ImplicitConvert @public @static func i128 cast_i128(i8 value)

    }
    @defineGlobal("i16") @public @valueOnly @final struct SignedInteger16 extends Integer {

        @public @static const i16 minValue
        @public @static const i16 maxValue

        @ImplicitConvert @public @static func i32 cast_i32(i16 value)
        @ImplicitConvert @public @static func i64 cast_i64(i16 value)
        @ImplicitConvert @public @static func i128 cast_i128(i16 value)

    }
    @defineGlobal("i32") @public @valueOnly @final struct SignedInteger32 extends Integer {

        @public @static const i32 minValue
        @public @static const i32 maxValue

        @ImplicitConvert @public @static func i64 cast_i64(i32 value)
        @ImplicitConvert @public @static func i128 cast_i128(i32 value)

    }
    @defineGlobal("i64") @public @valueOnly @final struct SignedInteger64 extends Integer {

        @public @static const i64 minValue
        @public @static const i64 maxValue

        @ImplicitConvert @public @static func i128 cast_i128(i64 value)
        
    }
    @defineGlobal("i128") @public @valueOnly @final struct SignedInteger128 extends Integer {

        @public @static const i128 minValue
        @public @static const i128 maxValue

    }
    
    @defineGlobal(["u8", "byte"]) @public @valueOnly @final struct UnsignedInteger8 extends Integer {

        @public @static const u8 minValue
        @public @static const u8 maxValue

        @ImplicitConvert @public @static func u16 cast_u16(u8 value)
        @ImplicitConvert @public @static func u32 cast_u32(u8 value)
        @ImplicitConvert @public @static func u64 cast_u64(u8 value)
        @ImplicitConvert @public @static func u128 cast_u128(u8 value)
        @ImplicitConvert @public @static func i16 cast_i16(u8 value)
        @ImplicitConvert @public @static func i32 cast_i32(u8 value)
        @ImplicitConvert @public @static func i64 cast_i64(u8 value)
        @ImplicitConvert @public @static func i128 cast_i128(u8 value)

    }
    @defineGlobal("u16") @public @valueOnly @final struct UnsignedInteger16 extends Integer {

        @public @static const u16 minValue
        @public @static const u16 maxValue

        @ImplicitConvert @public @static func u32 cast_u32(u16 value)
        @ImplicitConvert @public @static func u64 cast_u64(u16 value)
        @ImplicitConvert @public @static func u128 cast_u128(u16 value)
        @ImplicitConvert @public @static func i32 cast_i32(u16 value)
        @ImplicitConvert @public @static func i64 cast_i64(u16 value)
        @ImplicitConvert @public @static func i128 cast_i128(u16 value)

    }
    @defineGlobal("u32") @public @valueOnly @final struct UnsignedInteger32 extends Integer {

        @public @static const u32 minValue
        @public @static const u32 maxValue

        @ImplicitConvert @public @static func u64 cast_u64(u32 value)
        @ImplicitConvert @public @static func u128 cast_u128(u32 value)
        @ImplicitConvert @public @static func i64 cast_i64(u32 value)
        @ImplicitConvert @public @static func i128 cast_i128(u32 value)

    }
    @defineGlobal("u64") @public @valueOnly @final struct UnsignedInteger64 extends Integer {

        @public @static const u64 minValue
        @public @static const u64 maxValue

        @ImplicitConvert @public @static func u128 cast_u128(u64 value)
        @ImplicitConvert @public @static func i128 cast_i128(u64 value)

    }
    @defineGlobal("u128") @public @valueOnly @final struct UnsignedInteger128 extends Integer {

        @public @static const u128 minValue
        @public @static const u128 maxValue

    }

    @defineGlobal(["f32", "float"]) @public @valueOnly @final struct Single {}
    @defineGlobal(["f64", "double"]) @public @valueOnly @final struct Double {}

    @defineGlobal("bool") @public @valueOnly @final struct Boolean {}

    @defineGlobal("string") @public @valueOnly @final struct String {

        @ImplicitConvert @public func i8 parse_i8(string value)
        @ImplicitConvert @public func i16 parse_i16(string value)
        @ImplicitConvert @public func i32 parse_i32(string value)
        @ImplicitConvert @public func i64 parse_i64(string value)
        @ImplicitConvert @public func i128 parse_i128(string value)

        @ImplicitConvert @public func u8 parse_u8(string value)
        @ImplicitConvert @public func u16 parse_u16(string value)
        @ImplicitConvert @public func u32 parse_u32(string value)
        @ImplicitConvert @public func u64 parse_u64(string value)
        @ImplicitConvert @public func u128 parse_u128(string value)
        
    }

    @defineGlobal("void") @public @abstract @final struct Void {}
    @defineGlobal("noreturn") @public @abstract @final struct NoReturn {}

    namespace Collections {

        @public @final struct Array(type ElementT) {
            @IndexerGet @public func ElementT Get(i32 i)
            @IndexerSet @public func void Set(i32 i, ElementT value)
            @get("Length") @public func i32 GetLength()
        }

        @public @final struct List(type ElementT) {
            @IndexerGet @public func ElementT Get(i32 i)
            @IndexerSet @public func void Set(i32 i, ElementT value)
            @get("Length") @public func i32 GetLength()
        }

    }

    namespace Static {

        @public @valueOnly @final struct StringBuffer(int bufferLength)
        {

        }

    }

}
