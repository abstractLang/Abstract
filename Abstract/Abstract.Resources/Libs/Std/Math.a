###

    ABSTRACT STANDARD LIBRARY SCRIPT

###

namespace Math {

    @public const f64 PI = 3.1415
    @public const f64 E = 2.71828

    const i8 MAX_ITERATIONS = 15

    @public func f64 sin(f64 rad) {
        # CORDIC algorithim implementation
        # references: https://en.wikipedia.org/wiki/CORDIC

        const f64 a = 10 * 20 + 40 * 7 / 3 ** 8

    }

    @public func f64 sqrt(f64 value) {
        # Newton-Raphson method algorithim implementation

        const f64 tolerance = 0.001
        let f64 x = value / 2

        while abs(x ** 2 - value) > tolerance
            => x = 0.5 * (x + value / x)

        return x

    }

    @public func f64 abs(f64 value) {

        if (value > 0) return value
        else return -value

    }

    @public func f64 atan(f64 value) {

        # Taylor Series implementation
    
        let f64 res = 0.0
        
        for i in MAX_ITERATIONS => {
        
            let i8 sign

            if (n % 2 == 0) sign = 1
            else sign = -1

            res += sign * term / (2 * n + 1)
            term *= x ** 2
        
        }

        return res

    }

    @public func f64 atan2(f64 x, f64 y) {
    
        if (x > 0) return atan(y / x)
        elif (x < 0 and y >= 0) return atan(y / x) + PI
        elif (x < 0 and y < 0) return atan(y / x) - PI
        elif (x == 0 and y > 0) return PI / 2
        elif (x == 0 and y < 0) return -(PI / 2)
        else return 0

    }

}
