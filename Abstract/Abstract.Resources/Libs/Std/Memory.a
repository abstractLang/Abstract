###    ABSTRACT STANDARD LIBRARY SCRIPT    ###

import { Slice } from Std.Types.Static

# FIXME shit not a single reference is working here

namespace Memory {

    # let ?Allocator _rootAllocator = null
    # const List(Allocator) _scopeAllocatorStack

    # @getter("rootAllocator")
    # @public func Allocator getRootAllocator() {
    #    return _rootAllocator
    # }

    # @getter("generalAllocator")
    # @public func Allocator getGPAllocator() {}

    # ### FIXME compiler can't process it ###
    # @public @abstract struct Allocator {

    #     # methods to be overrided
    #     @public @abstract func Slice(u8) rawAlloc(int length, byte aliginment)
    #     @public @abstract func Slice(u8) rawResize(Slice(u8) buf, int new_length)
    #     @public @abstract func void rawFree(Slice(u8) buf)

    #     @public func *T alloc(type T)
    #     @public func void free(type T, *T value)

    #     @public func *[]T alloc(type T, uptr length)
    #     @public func *[]T resize(type T, uptr length)
    #     @public func void free(type T, *[]T value)

    # }

    # # TODO BufferAllocator
    # # TODO GeneralPurposeAllocator

    # ### FIXME compiler can't process it ###
    # @public struct ScopeAllocator extends Allocator {

    #     @readonly let Allocator _parentAllocator

    #     #constructor(Allocator parent) {
    #     #    _parentAllocator = parent
    #     #}

    #     #destructor() {
    #         # TODO free every node allocated by this
    #         # instance
    #     #}

    #     @public @abstract func Slice(u8) rawAlloc(int length, byte aliginment) {
    #         # TODO ScopeAllocator.rawAlloc
    #     }
    #     @public @abstract func Slice(u8) rawResize(Slice(u8) buf, int new_length) {
    #         # TODO ScopeAllocator.rawResize
    #     }
    #     @public @abstract func void rawFree(Slice(u8) buf) {
    #         # TODO ScopeAllocator.rawFree
    #     }
    # }

    # namespace PageAllocator {

    #     ###
    #     Simple default interface to communicate directly with the OS
    #     and provide a entire memory page (4096 bytes or 4KiB usually).

    #     This should allow the program to statically and agnostically
    #     require a entire memory page from any OS, target or system
    #     configuration (Std.System depending on the target).
    #     ###

    #     @getter("pageSize")
    #     @public func uptr getPageSize() {}

    #     @public func Slice(u8) allocPage()
    #     @public func void freePage(Slice(u8) page)

    # }
}
